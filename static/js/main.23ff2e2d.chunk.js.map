{"version":3,"sources":["img/Floral/PNG/00091A Floral.png","img/Floral/PNG/00091B Floral.png","img/Sunflower Mandala/01376 Sunflower Mandala.png","storages/Main.tsx","Main.tsx","img/imgObjects.tsx","Header.tsx","App.tsx","serviceWorker.ts","index.tsx"],"names":["module","exports","NEWSAPI","topHeadlines","everything","sources","ae","ar","at","au","be","bg","br","ca","ch","cn","co","cu","cz","de","eg","fr","gb","gr","hk","hu","id","ie","il","in","it","jp","kr","lt","lv","ma","mx","my","ng","nl","no","nz","ph","pl","pt","ro","rs","ru","sa","se","sg","si","sk","th","tr","tw","ua","us","ve","za","Main","RedditFeed","process","News","React","useState","inputValue","setValue","subreddit","setSubreddit","className","onSubmit","e","preventDefault","htmlFor","type","value","onChange","target","name","RedditFetcher","posts","setPosts","useEffect","a","fetch","response","json","console","log","data","children","map","thread","fetchData","post","key","href","url","title","author","news","setNews","endpoint","country","apiKey","articles","fetchNews","NewsSearchParams","article","publishedAt","src","urlToImage","alt","description","content","sunflowerMandala","floralAPNG","floralBPNG","png","sunflowerMandalaPNG","Header","LoginForm","mailTel","switchMailTel","loginPane","swithLoginPane","onClick","undefined","action","method","inputMode","autoFocus","required","autoComplete","aria-label","aria-describedby","disabled","App","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","message"],"mappings":"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","file":"static/js/main.23ff2e2d.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/00091A Floral.e7eed119.png\";","module.exports = __webpack_public_path__ + \"static/media/00091B Floral.de4fa060.png\";","module.exports = __webpack_public_path__ + \"static/media/01376 Sunflower Mandala.f112751c.png\";","export const NEWSAPI = {\r\n  apiKey: \"ef10bc52984c45b7adae766ba31da6ad\",\r\n\r\n  /** News API has 2 main endpoints and a minor one. */\r\n  endpoint: {\r\n    /** \r\n     * This endpoint provides live top and breaking headlines for a country, specific category in a country, single source, or multiple sources. You can also search with keywords. Articles are sorted by the earliest date published first. \r\n     * \r\n     * This endpoint is great for retrieving headlines for display on news tickers or similar.\r\n      */\r\n    topHeadlines: \"/v2/top-headlines\",\r\n    /**\r\n     *  Search through millions of articles from over 50,000 large and small news sources and blogs. This includes breaking news as well as lesser articles.\r\n     * \r\n     * This endpoint suits article discovery and analysis, but can be used to retrieve articles for display, too.\r\n     */\r\n    everything: \"/v2/everything\",\r\n    /**\r\n     *  Returns the subset of news publishers that top headlines (/v2/top-headlines) are available from. It's mainly a convenience endpoint that you can use to keep track of the publishers available on the API, and you can pipe it straight through to your users.\r\n      */\r\n    sources: \"/v2/sources\",\r\n  },\r\n\r\n  /** \r\n   * The 2-letter ISO 3166-1 code of the country you want to get headlines for.\r\n   * \r\n   * Note: can't mix this param with the \"source\" param.\r\n   */\r\n  country: {\r\n    ae: \"country=ae\", \r\n    ar: \"country=ar\", \r\n    at: \"country=at\", \r\n    au: \"country=au\", \r\n    be: \"country=be\", \r\n    bg: \"country=bg\", \r\n    br: \"country=br\", \r\n    ca: \"country=ca\", \r\n    ch: \"country=ch\", \r\n    cn: \"country=cn\", \r\n    co: \"country=co\", \r\n    cu: \"country=cu\", \r\n    cz: \"country=cz\", \r\n    de: \"country=de\", \r\n    eg: \"country=eg\", \r\n    fr: \"country=fr\", \r\n    gb: \"country=gb\", \r\n    gr: \"country=gr\", \r\n    hk: \"country=hk\", \r\n    hu: \"country=hu\", \r\n    id: \"country=id\", \r\n    ie: \"country=ie\", \r\n    il: \"country=il\", \r\n    in: \"country=in\", \r\n    it: \"country=it\", \r\n    jp: \"country=jp\", \r\n    kr: \"country=kr\", \r\n    lt: \"country=lt\", \r\n    lv: \"country=lv\", \r\n    ma: \"country=ma\", \r\n    mx: \"country=mx\", \r\n    my: \"country=my\", \r\n    ng: \"country=ng\", \r\n    nl: \"country=nl\", \r\n    no: \"country=no\", \r\n    nz: \"country=nz\", \r\n    ph: \"country=ph\", \r\n    pl: \"country=pl\", \r\n    pt: \"country=pt\", \r\n    ro: \"country=ro\", \r\n    rs: \"country=rs\", \r\n    ru: \"country=ru\", \r\n    sa: \"country=sa\", \r\n    se: \"country=se\", \r\n    sg: \"country=sg\", \r\n    si: \"country=si\", \r\n    sk: \"country=sk\", \r\n    th: \"country=th\", \r\n    tr: \"country=tr\", \r\n    tw: \"country=tw\", \r\n    ua: \"country=ua\", \r\n    us: \"country=us\", \r\n    ve: \"country=ve\", \r\n    za: \"country=za\",\r\n  },\r\n  \r\n  /**\r\n   * The category you want to get headlines for.\r\n   * \r\n   * Note: you can't mix this param with the \"source\" param. \r\n   */\r\n  category: {\r\n    business: \"business\", \r\n    entertainment: \"entertainment\", \r\n    general: \"general\", \r\n    health: \"health\", \r\n    science: \"science\", \r\n    sports: \"sports\", \r\n    technology: \"technology\",\r\n   }\r\n}","import React from 'react';\r\nimport { NEWSAPI } from './storages/Main';\r\nimport { MiscMaster } from './misc/_MiscMaster';\r\n\r\nimport \"./Main.scss\";\r\n\r\nexport function Main() {\r\n  return (\r\n    <main>\r\n      <RedditFeed />\r\n      {process.env.NODE_ENV === \"development\" && <MiscMaster />}\r\n      <News />\r\n    </main>\r\n  );\r\n}\r\n\r\nfunction RedditFeed() {\r\n  const [inputValue, setValue] = React.useState(\"reactjs\");\r\n  const [subreddit, setSubreddit] = React.useState(inputValue);\r\n\r\n  function handleSubmit(e: React.FormEvent) {\r\n    e.preventDefault();\r\n    setSubreddit(() => inputValue);\r\n  }\r\n\r\n  return (\r\n    <section className=\"redditfeed\">\r\n      <h2>Reddit threads</h2>\r\n      <form onSubmit={handleSubmit}>\r\n        <label htmlFor=\"subredditsearch\">Search subreddit:</label>\r\n        <input \r\n          type=\"search\"\r\n          id=\"subredditsearch\"\r\n          value={inputValue}\r\n          onChange={e => setValue(e.target.value)}\r\n          name=\"subredditsearch\"\r\n        />\r\n      </form>\r\n      <RedditFetcher subreddit={subreddit}/>\r\n    </section>\r\n  );\r\n}\r\n\r\nfunction RedditFetcher({ subreddit }: RedditFetcherArg) {\r\n  const [posts, setPosts] = React.useState<RedditAPIThreadData[]>([]);\r\n\r\n  React.useEffect(() => {\r\n    fetchData();\r\n\r\n    async function fetchData() {\r\n      const response = await fetch(\r\n        `https://www.reddit.com/r/${subreddit}.json`\r\n      );\r\n      const json: RedditAPIResponseJSON = await response.json();\r\n      console.log(json);\r\n      setPosts(json.data.children.map(thread => thread.data));\r\n    }\r\n  }, [subreddit, setPosts]);\r\n\r\n  return (\r\n    <ul className=\"rdthreads\">\r\n      {\r\n        posts?.map(post => (\r\n          <li key={post.id} className=\"rdthread\">\r\n            <a href={post.url}>{post.title}</a> by <b>{post.author}</b>\r\n          </li>\r\n        ))\r\n      }\r\n    </ul>\r\n  );\r\n}\r\n\r\nfunction News() {\r\n  const [news, setNews] = React.useState<NewsAPIResponseJSON[\"articles\"]>([]);\r\n  const {endpoint, country, apiKey} = NEWSAPI;\r\n\r\n  React.useEffect(() => {\r\n    fetchNews();\r\n  }, [setNews]);\r\n\r\n  async function fetchNews() {\r\n    const response = await fetch(`http://newsapi.org${endpoint.topHeadlines}?${country.us}&pageSize=5&apiKey=${apiKey}`);\r\n    const json: NewsAPIResponseJSON = await response.json();\r\n    console.log(json);\r\n    \r\n    setNews(json.articles);\r\n  }\r\n\r\n  return (\r\n    <aside className=\"bignews\">\r\n      <h2>News</h2>\r\n      <NewsSearchParams />\r\n      <ul>\r\n      {\r\n        news?.map((article) => (\r\n          <li key={article.publishedAt}>\r\n            <article className=\"newsarticle\">\r\n              <h3>{article.title}</h3>\r\n              <a href={article.url}>\r\n                <img \r\n                  src={article.urlToImage} \r\n                  alt={article.description || `news article`}\r\n                />\r\n              </a>\r\n              {\r\n                article.content !== \"\" && article.content && <p className=\"newscontent\" >{article.content}</p>\r\n              }\r\n            </article>\r\n          </li>\r\n        ))\r\n      }\r\n      </ul>\r\n    </aside>\r\n  );\r\n}\r\n\r\nfunction NewsSearchParams() {\r\n  return (\r\n    <form>\r\n        <h3>Search parameters</h3>\r\n        <fieldset>\r\n          <legend>Required</legend>\r\n          <label htmlFor=\"\">Search param:</label>\r\n          <input type=\"search\" name=\"\" id=\"\"/>\r\n        </fieldset>\r\n      </form>\r\n  );\r\n}","import React from \"react\";\r\nimport floralAPNG from \"./Floral/PNG/00091A Floral.png\";\r\nimport floralBPNG from \"./Floral/PNG/00091B Floral.png\";\r\nimport sunflowerMandalaPNG from \"./Sunflower Mandala/01376 Sunflower Mandala.png\"\r\n// import { ReactComponent as FloralASVG} from \"./Floral/SVG/00091A Floral.svg\";\r\n// import { ReactComponent as FloralBSVG} from \"./Floral/SVG/00091B Floral.svg\";\r\n// import { ReactComponent as SunflowerMandalaSVG} from \"./Floral/SVG/00091B Floral.svg\";\r\n\r\n// TODO fix SVG imports\r\n\r\nexport const floralA = {\r\n  png: floralAPNG,\r\n  // svg: <FloralASVG title=\"floral\" />,\r\n};\r\n\r\nexport const floralB = {\r\n  png: floralBPNG,\r\n  // svg: <FloralBSVG title=\"floral\" />,\r\n};\r\n\r\nexport const sunflowerMandala = {\r\n  png: sunflowerMandalaPNG,\r\n  // svg: <SunflowerMandalaSVG title=\"sunflower mandala\" />,\r\n}","import React from 'react';\r\nimport { sunflowerMandala } from './img/imgObjects';\r\n\r\nimport \"./Header.scss\";\r\n\r\nexport function Header() {\r\n  return (\r\n    <header>\r\n      <h1>\r\n        Peter's corner\r\n          <img src={sunflowerMandala.png} alt=\"sunflower logo\" />\r\n      </h1>\r\n      {\r\n        (process.env.NODE_ENV === \"test\" || process.env.NODE_ENV === \"development\") && (\r\n          <small>The application is running in <b>{process.env.NODE_ENV}</b> mode.</small>\r\n        )\r\n      }\r\n      <nav>\r\n\r\n        <ul>\r\n          <li><a href=\"#\">Section 1</a></li>\r\n          <li><a href=\"#\">Section 2</a></li>\r\n          <li><a href=\"#\">Section 3</a></li>\r\n          <li><a href=\"#\">Section 4</a></li>\r\n          <li><a href=\"#\">Section 5</a></li>\r\n          <li><a href=\"#\">Section 6</a></li>\r\n          <li><a href=\"#\">Section 7</a></li>\r\n          <li><a href=\"#\">Section 8</a></li>\r\n          <li><a href=\"#\">Section 9</a></li>\r\n          <li><a href=\"#\">Section 10</a></li>\r\n        </ul>\r\n      </nav>\r\n      <LoginForm />\r\n    </header>\r\n  );\r\n}\r\n\r\nfunction LoginForm() {\r\n  const [mailTel, switchMailTel] = React.useState(false);\r\n  const [loginPane, swithLoginPane] = React.useState(false);\r\n\r\n  // const passwordInput = document.getElementById('password');\r\n  // const togglePasswordButton = document.getElementById('toggle-password');\r\n\r\n  // togglePasswordButton.addEventListener(\"click\", togglePassword);\r\n\r\n  // function togglePassword() {\r\n  //   if (passwordInput.type === \"password\") {\r\n  //     passwordInput.type = \"text\";\r\n  //     togglePasswordButton.textContent = \"Hide password\";\r\n  //     togglePasswordButton.setAttribute(\"aria-label\", \"Hide password\");\r\n  //   } else {\r\n  //     passwordInput.type = \"password\";\r\n  //     togglePasswordButton.textContent = \"Show password\";\r\n  //     togglePasswordButton.setAttribute(\"aria-label\", `Show password as plaint text.\\n Warning: this will display your password on the screen.`);\r\n  //   }\r\n  // }\r\n\r\n  function handleSubmit(e: React.FormEvent) {\r\n    e.preventDefault();\r\n  }\r\n\r\n  return (\r\n    <>\r\n      <button \r\n        className=\"loginswitch\" \r\n        type=\"button\"\r\n        onClick={() => swithLoginPane(!loginPane)}\r\n      >\r\n        {loginPane ? \"Hide login\" :\"Show login\"}\r\n      </button>\r\n      <form \r\n        className={loginPane ? \"formopen\" : undefined}\r\n        id=\"loginform\" \r\n        action=\"#\" \r\n        method=\"post\" \r\n        onSubmit={handleSubmit}\r\n      >\r\n        <fieldset>\r\n          <legend>Login form</legend>\r\n          <section>\r\n            <label htmlFor=\"username\">Username:</label>\r\n            <input\r\n              id=\"username\"\r\n              type=\"text\"\r\n              inputMode=\"text\"\r\n              name=\"name\"\r\n              autoFocus={true} \r\n            />\r\n          </section>\r\n          <section>\r\n            {\r\n              mailTel ? ( // switch between email and tel input\r\n                <> \r\n                  <label htmlFor=\"usertel\">Phone number:</label>\r\n                  <input\r\n                    id=\"usertel\"\r\n                    type=\"tel\"\r\n                    name=\"phone\"\r\n                    inputMode=\"tel\" \r\n                    required={mailTel ? true : false}\r\n                  />\r\n                </>\r\n              ) : (\r\n                <> \r\n                  <label htmlFor=\"useremail\">Email:</label>\r\n                  <input\r\n                    id=\"useremail\"\r\n                    type=\"email\"\r\n                    inputMode=\"email\"\r\n                    name=\"email\"\r\n                    autoComplete=\"email\"\r\n                    required={mailTel ? false : true} \r\n                  />\r\n                </>\r\n              )\r\n            }\r\n            <button \r\n              type=\"button\"\r\n              onClick={() => switchMailTel(!mailTel)} \r\n            >\r\n              {mailTel ? \"use email\" : \"use phone number\"}\r\n            </button>\r\n          </section>\r\n          <section>\r\n            <label \r\n              htmlFor=\"userpassword\">Password:</label>\r\n            <button \r\n              id=\"toggle-password\" \r\n              type=\"button\" \r\n              aria-label=\"Show password as plain text. Warning: this will display your password on the screen.\"\r\n            >\r\n              Show password\r\n            </button>\r\n            <input\r\n              id=\"userpassword\"\r\n              type=\"password\"\r\n              name=\"current-password\" // sign-in form only\r\n              required={true} \r\n              aria-describedby=\"password-constrains\"\r\n            />\r\n            <div id=\"password-constrains\">8+ characters with a mix of letters, numbers and symbols.</div>\r\n            <label htmlFor=\"newpassword\">New Password:</label>\r\n            <input\r\n              id=\"newpassword\"\r\n              type=\"password\"\r\n              name=\"new-password\"\r\n              disabled={true} />\r\n          </section>\r\n          <a href=\"#\">Forgot password...</a>\r\n          <button // TODO disable once it's clicked, probably to go along with async submit\r\n            type=\"submit\"\r\n            disabled={true}\r\n          >\r\n            Sign in\r\n          </button>\r\n        </fieldset>\r\n      </form>\r\n    </>\r\n  );\r\n}\r\n","import React from 'react';\nimport './App.scss';\nimport { Main } from './Main';\nimport { Header } from './Header';\n\nexport function App() {\n  return (\n    <>\n      <Header />\n      <Main />\n      <footer>\n        <address>\n          <p>This site was created by Pete Buttgig</p>\n          <p>\n            E-mail: <a href=\"mailto: vinniethepooloo@protonmail.com\">vinniethepoolooATprotonmail.com</a>\n          </p>\n        </address>\n      </footer>\n    </>\n  );\n}\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(\n      process.env.PUBLIC_URL,\n      window.location.href\n    );\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.scss';\nimport { App } from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}